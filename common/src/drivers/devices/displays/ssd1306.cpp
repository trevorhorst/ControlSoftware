#include "common/drivers/devices/displays/ssd1306.h"

const uint32_t SSD1306::height = 8;
const uint32_t SSD1306::width = 128;
const uint8_t SSD1306::control_address = 0x3C;

const unsigned char hi_logo [] = {
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x40, 0xE0, 0xF8, 0xF8, 0xFC, 0xFC, 0xFC, 0xFC,
0xFC, 0xFC, 0xFC, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0xC0, 0xC0, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x3C, 0x0C, 0x06, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07,
0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x1E, 0x3E,
0xFE, 0xFF, 0xFF, 0x3F, 0xBF, 0xFE, 0xFC, 0xE0, 0xE0, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x18,
0x1C, 0x1C, 0x1C, 0x18, 0x18, 0x18, 0x3C, 0x38, 0x38, 0x38, 0x18, 0xD8, 0xC0, 0xC0, 0x80, 0x00,
0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x0F, 0x0F, 0x0E, 0x00, 0x00, 0x01, 0x03, 0x87, 0x07, 0x07,
0x7F, 0xFF, 0xFF, 0xFF, 0x7F, 0x7E, 0x7E, 0x7C, 0x3C, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1C, 0x3C, 0xFC, 0xF8, 0xF8, 0xF0, 0xE0,
0xE0, 0xE0, 0xE0, 0xC0, 0xC0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC0, 0x80, 0x40, 0x40, 0xC0,
0x80, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0xD0, 0xD0, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x80, 0x40,
0x00, 0x00, 0x80, 0xC0, 0x40, 0x40, 0x40, 0x80, 0x00, 0x00, 0xE0, 0x90, 0x10, 0x90, 0x60, 0x00,
0x00, 0xE0, 0x10, 0x10, 0x10, 0xE0, 0x80, 0x00, 0xE0, 0x90, 0x10, 0x90, 0x60, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x78, 0xFC, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFE, 0xFC, 0xE0, 0xE0, 0x80, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x00, 0x00,
0x1F, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x00, 0x1F, 0x1F, 0x00, 0x00, 0x1F, 0x02, 0x03, 0x0C, 0x18,
0x10, 0x00, 0x0F, 0x12, 0x12, 0x12, 0x12, 0x13, 0x00, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x0E, 0x00,
0x00, 0x0F, 0x10, 0x10, 0x10, 0x0F, 0x02, 0x00, 0x1E, 0x11, 0x11, 0x11, 0x1E, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x7F, 0x7F, 0x7F, 0x7F, 0x7F, 0x3F, 0x3F, 0x1F, 0x0F, 0x0E, 0x02,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x0F, 0x1F, 0x1F, 0x3F, 0x3F, 0x1F,
0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

SSD1306::SSD1306( I2C *bus, uint8_t control )
    : mI2CBus( bus )
    , mControlAddress( control )
    , mScreenBuffer( nullptr )
{
    LOG_INFO( "SSD1306 Control Addr: %02X", control );
    initialize();
    memcpy( mScreenBuffer, hi_logo, sizeof( hi_logo ) );
    writeScreen();
}

SSD1306::~SSD1306()
{
    // Clear the screen when we exit to help prevent burn in
    clearScreen();
}

void SSD1306::initialize()
{
    bool retval = false;

    mI2CBus->setSlave( mControlAddress );
    mI2CBus->applySettings();

    mScreenBuffer = new uint8_t[ width * height ]; // Create a block of memory for the screen buffer
    memset( mScreenBuffer, 0, ( width * height ) );

    retval &= writeCommand( 1, 0xAE );             // Display off
    retval &= writeCommand( 2, 0xD5, 0x80 );       // set display clock division
    retval &= writeCommand( 2, 0xA8, 0x3F );       // set multiplex
    retval &= writeCommand( 2, 0xD3, 0x00 );       // set display offset
    retval &= writeCommand( 1, 0x40 );             // set start line #0
    retval &= writeCommand( 2, 0x8D, 0x14 );       // set charge pump
    retval &= writeCommand( 2, 0x20, 0x00 );       // Memory mode
    retval &= writeCommand( 1, 0xA1 );             // Segremap(0xA0 = reset, 0xA1 = 127 = SEG0)
    retval &= writeCommand( 1, 0xC8 );             // Com scan dec (0xC0 = reset normal, 0xC8 = scan  from Com[n-1] - Com 0
    retval &= writeCommand( 2, 0xDA, 0x12 );       // Set com pins
    retval &= writeCommand( 2, 0x81, 0xCF );       // Set contrast
    retval &= writeCommand( 2, 0xD9, 0xF1 );       // Set precharge
    retval &= writeCommand( 2, 0xDB, 0x40 );       // Set Vcom select
    retval &= writeCommand( 1, 0xA4 );             // Resume RAM content display
    retval &= writeCommand( 1, 0xA6 );             // Normal display not inverted
    retval &= writeCommand( 1, 0x00 );             // low col=0
    retval &= writeCommand( 1, 0x10 );             // high col=0
    retval &= writeCommand( 1, 0x40 );             // line #0
    retval &= writeCommand( 1, 0xAF );             // Display ON
    retval &= writeCommand( 3, 0x21, 0x00, 0x7F ); // Set column address; start 0, end 127
    retval &= writeCommand( 3, 0x22, 0x00, 0x07 ); // Set row address; start 0, end 7
    retval &= writeCommand( 1, 0xAF );             // Display ON

    writeCommand (3, 0x21, 0x00, 0x7F); // Set column address; start 0, end 127
    writeCommand (3, 0x22, 0x00, 0x07); // Set row address; start 0, end 7

    clearScreen();

}

int32_t SSD1306::writeCommand( int32_t numBytes, ... )
{
    va_list arguments;
    bool retVal = false;
    uint8_t *data = new uint8_t[numBytes+1];
    memset( data, 0, numBytes + 1 );
    data[0] = 0x3C; // send control byte and then cmd(s)

    va_start (arguments, numBytes);
    for( int32_t i = 1; i < numBytes + 1; i++ ) {
       data[ i ] = ((int8_t)va_arg (arguments, int));
    }
    va_end (arguments);

    mI2CBus->writeBytes( data, numBytes + 1 );
    delete [] data;
    data = 0;

    return retVal;
}

bool SSD1306::writeScreen()
{
    bool fOK;
    int16_t uiIndex = 0x00;
    uint8_t uchTemp[ 0x09 ];

    // Need to set OLED screen pointer back to 0, 0 before writing
    // This was the only way I found to do this with the chip set commands.
    fOK = writeCommand( 3, 0x21, 0x00, 0x7F ); // Set column address; start 0, end 127
    fOK = writeCommand( 3, 0x22, 0x00, 0x07 ); // Set row address; start 0, end 7

    while( uiIndex < ( width * height ) ) {
       uchTemp[ 0 ] = 0x40;           // Co = 0; D/C# = 1 for data
       for( int i = 0; i < 8; i++ ) {  // Copy 8 bytes to temp buffer
          uchTemp[ i + 1 ] = mScreenBuffer[ uiIndex + i ];
       }
       fOK = mI2CBus->writeBytes( uchTemp, 0x09 ); //Write control byte with 8 data bytes
       uiIndex += 0x08;             // Move to next Octet
    }

    return fOK;
}

void SSD1306::clearBuffer()
{
    if( mScreenBuffer ) {
        memset( mScreenBuffer, 0x00, ( width * height ) );
    }
}

void SSD1306::clearScreen()
{
    // Clear internal buffer
    clearBuffer();
    // Write cleared buffer to the screen
    writeScreen();
}
